/**
 * <p>
 *     适配器模式，实际情况与需求之间的适配方案，通过适配器使得现有功能能够满足实际需求，便于复用
 * </p>
 * <p>
 *     分类：
 *     <ul>
 *         <li>类适配器模式（使用继承的适配器模式）</li>
 *         <li>对象适配器模式（使用委托的适配器模式）</li>
 *     </ul>
 * </p>
 * <p>
 *     角色：
 *     <ul>
 *         <li>请求者，该角色发出实际需求</li>
 *         <li>需求，也就是请求者发出的实际需求</li>
 *         <li>被适配者，也就是现有的功能，需要被适配</li>
 *         <li>适配器，适配现有功能，来满足需求提供给请求者使用（请求者直接面对需求，需求直接面对适配器）</li>
 *     </ul>
 * </p>
 * <p>
 *     使用场景：
 *  <ul>
 *      <li>适配现有的功能，而不必去修改现有的已经测试通过的代码</li>
 *      <li>版本迭代，适配旧代码</li>
 *      <li>当现有功能（被适配者）与需求完全不同时，不能使用适配器模式</li>
 *  </ul>
 * </p>
 *
 */
package com.design.adapter;